<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="Main" Id="{ea0bf136-bb68-48b6-99e0-4530d55408e2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
	tpImAPLC : TP := (PT:=T#10S);
	
	// XRTM1
	// Motors
	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1_Yup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1_Yup]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:MMS:YUP
	'}
	M1 : DUT_MotionStage := (fVelocity:=200.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
	fbMotionStage_m1 : FB_MotionStage;
	
	
	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1_Ydwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1_Ydwn]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:MMS:YDWN
	'}
	M2 : DUT_MotionStage := (fVelocity:=200.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
	fbMotionStage_m2 : FB_MotionStage;
	
	
	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1_Xup]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1_Xup]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:MMS:XUP
	'}
	M3 : DUT_MotionStage := (fVelocity:=1000.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
	fbMotionStage_m3 : FB_MotionStage;
	
	
	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1_Xdwn]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1_Xdwn]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:MMS:XDWN
	'}
	M4 : DUT_MotionStage := (fVelocity:=1000.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE);
	fbMotionStage_m4 : FB_MotionStage;
	
	
	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1_PitchCoarse]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1_PitchCoarse]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:MMS:PITCH
	'}
	M5 : DUT_MotionStage := (fVelocity:=150.0); // XRTM1 Pitch Stepper
	
	
	{attribute 'TcLinkTo' := '.bLimitForwardEnable:=TIIB[EL7041-1000_M1_Bender]^STM Status^Status^Digital input 1;
                              .bLimitBackwardEnable:=TIIB[EL7041-1000_M1_Bender]^STM Status^Status^Digital input 2'}
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:MMS:BENDER
	'}
	M6 : DUT_MotionStage := (fVelocity:=150.0, nEnableMode:=ENUM_StageEnableMode.ALWAYS, bPowerSelf:=TRUE); // XRTM1 Bender
	fbMotionStage_m6 : FB_MotionStage;
	
	
	{attribute 'TcLinkTo' := '.fbRunHOMS.bSTOEnable1:=TIIB[EL1004_M1_STO]^Channel 1^Input;
                              .fbRunHOMS.bSTOEnable2:=TIIB[EL1004_M1_STO]^Channel 2^Input;
	                          .fbRunHOMS.stYupEnc.Count:=TIIB[EL5042_M1_Yupdwn]^FB Inputs Channel 1^Position;
	                          .fbRunHOMS.stYdwnEnc.Count:=TIIB[EL5042_M1_Yupdwn]^FB Inputs Channel 2^Position;
	                          .fbRunHOMS.stXupEnc.Count:=TIIB[EL5042_M1_Xupdwn]^FB Inputs Channel 1^Position;
	                          .fbRunHOMS.stXdwnEnc.Count:=TIIB[EL5042_M1_Xupdwn]^FB Inputs Channel 2^Position'}
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS
	'}
	XRTM1 : DUT_HOMS;
	
	
	// Encoder Arrays/RMS Watch:
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:Y
	'}
	fbYRMSErrorM1L0 : FB_RMSWatch;
	fMaxYRMSErrorM1L0 : LREAL;
	fMinYRMSErrorM1L0 : LREAL;

	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:X
	'}
	fbXRMSErrorM1L0 : FB_RMSWatch;
	fMaxXRMSErrorM1L0 : LREAL;
	fMinXRMSErrorM1L0 : LREAL;

	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:PITCH
	'}
	fbPitchRMSErrorM1L0 : FB_RMSWatch;
	fMaxPitchRMSErrorM1L0 : LREAL;
	fMinPitchRMSErrorM1L0 : LREAL;

	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:BENDER
	'}
	fbBenderRMSErrorM1L0 : FB_RMSWatch;
	fMaxBenderRMSErrorM1L0 : LREAL;
	fMinBenderRMSErrorM1L0 : LREAL;

	// Pitch Control
	fbM1L0PitchControl : FB_PitchControl;
	bM1L0PitchDone : BOOL;
	bM1L0PitchBusy : BOOL;

	// Bender Control
	fbBenderM1L0 : FB_Bender;

	// Raw Encoder Counts
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:YUP:CNT
		field: EGU cnt
		io: i
	'}
	nEncCntYupM1L0 : UDINT;
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:YDWN:CNT
		field: EGU cnt
		io: i
	'}
	nEncCntYdwnM1L0 : UDINT;
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:XUP:CNT
		field: EGU cnt
		io: i
	'}
	nEncCntXupM1L0 : UDINT;
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:XDWN:CNT
		field: EGU cnt
		io: i
	'}
	nEncCntXdwnM1L0 : UDINT;
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:PITCH:CNT
		field: EGU cnt
		io: i
	'}
	nEncCntPitchM1L0 : UDINT;

	// Encoder Reference Values
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:YUP:REF
		field: EGU cnt
		io: i
	'}
	nEncRefYupM1L0 : UDINT;
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:YDWN:REF
		field: EGU cnt
		io: i
	'}
	nEncRefYdwnM1L0 : UDINT;
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:XUP:REF
		field: EGU cnt
		io: i
	'}
	nEncRefXupM1L0 : UDINT;
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:XDWN:REF
		field: EGU cnt
		io: i
	'}
	nEncRefXdwnM1L0 : UDINT;
	{attribute 'pytmc' := '
		pv: XRTM1:HOMS:ENC:PITCH:REF
		field: EGU cnt
		io: i
	'}
	nEncRefPitchM1L0 : UDINT;
	mcReadParameterPitchM1L0 : MC_ReadParameter;
	fEncRefPitchM1L0_urad : LREAL; // Current Pitch encoder offset in urad






	//XRTM1PitchControl	:	FB_PitchControlOld;
	//{attribute 'TcLinkTo' := 	'.Gantry.diEncCnt	:=	TIIB[M1-Y1 (Elmo Drive)]^Inputs^Position actual value'}
	//XRTM1Y_GantryControl	:	FB_Gantry;
	//XRTM1X_GantryControl	:	FB_Gantry;
	XRTM2PitchControl	    :	FB_PitchControlOld;
	//{attribute 'TcLinkTo' := 	'.Gantry.diEncCnt	:=	TIIB[M2-Y1 (Elmo Drive)]^Inputs^Position actual value'}
	XRTM2Y_GantryControl	:	FB_Gantry;
	XRTM2X_GantryControl	:	FB_Gantry;
	XRTM3PitchControl	    :	FB_PitchControlOld;
//	{attribute 'TcLinkTo' := 	'.Gantry.diEncCnt	:=	TIIB[M3-Y1 (Elmo Drive)]^Inputs^Position actual value'}
	XRTM3Y_GantryControl	:	FB_Gantry;
	XRTM3X_GantryControl	:	FB_Gantry;
	
	
	// Expert mode permits direct access to individual acutators.
	ExpertMode	:	BOOL := FALSE;
	PitchManualMode: BOOL := FALSE;
	
	//Limit switch evaluation blocks
	//fbM1Y1LS	:	FB_LimitSwitchState;
	//fbM1Y2LS	:	FB_LimitSwitchState;
	//fbM1X1LS	:	FB_LimitSwitchState;
	//fbM1X2LS	:	FB_LimitSwitchState;
	//fbM1P1LS	:	FB_PitchSoftLimits;
	
	fbM2Y1LS	:	FB_LimitSwitchState;
	fbM2Y2LS	:	FB_LimitSwitchState;
	fbM2X1LS	:	FB_LimitSwitchState;
	fbM2X2LS	:	FB_LimitSwitchState;
	fbM2P1LS	:	FB_PitchSoftLimits;	
	
	fbM3Y1LS	:	FB_LimitSwitchState;
	fbM3Y2LS	:	FB_LimitSwitchState;
	fbM3X1LS	:	FB_LimitSwitchState;
	fbM3X2LS	:	FB_LimitSwitchState;
	fbM3P1LS	:	FB_PitchSoftLimits;	
	
	//Drive CoE Fb
	fbY1CoE	:	FB_ElmoGDCBellCoE;
	fbY2CoE	:	FB_ElmoGDCBellCoE;
	
	fbX1CoE	:	FB_ElmoGDCBellCoE;
	fbX2CoE	:	FB_ElmoGDCBellCoE;
	
	fbP1CoE	:	FB_ElmoGDCBellCoE;
	fbB1CoE	:	FB_ElmoGDCBellCoE;
	
	
	//Init params trigger
	rtInitParams	:	R_TRIG;
	
	//Test Parameters
		rStepSize: REAL;
	SettleTime: TON := (
	PT:=T#2s);
	TestUpperVoltage: REAL := 100;
	TestLowerVoltage: REAL := 10;
	xRunPiezoRepeatTest: BOOL;
	
	//Drive reference initializations
	fbInitDriveRef	:	FB_InitDriveRefs;
	//MPS Information
	fbMPS_States :  FB_MPS_STATES;
	M2_INRANGE  :   ARRAY[0..1] OF DINT := [24568920, 26568920];
	M2_OUTRANGE  :  ARRAY[0..1] OF DINT := [43568250, 50570250];
	//noConsequence	:	BOOL;
	
	mcBenderPower	:	MC_POWER;
	
	
	
	// Common
	fEncLeverArm_mm : LREAL := 513.0;
	
	
	// Logging
	fbLogHandler : FB_LogHandler;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// M1 BECKHOFF
XRTM1.fbRunHOMS(stYup:=M1,
               stYdwn:=M2,
               stXup:=M3,
               stXdwn:=M4,
               stPitch:=M5,
	           nYupEncRef:=GVL_M1_Constants.nYUP_ENC_REF,
               nYdwnEncRef:=GVL_M1_Constants.nYDWN_ENC_REF,
               nXupEncRef:=GVL_M1_Constants.nXUP_ENC_REF,
               nXdwnEncRef:=GVL_M1_Constants.nXDWN_ENC_REF,
			   bExecuteCoupleY:=XRTM1.bExecuteCoupleY,
               bExecuteCoupleX:=XRTM1.bExecuteCoupleX,
			   bExecuteDecoupleY:=XRTM1.bExecuteDecoupleY,
               bExecuteDecoupleX:=XRTM1.bExecuteDecoupleX,
               bGantryAlreadyCoupledY=>XRTM1.bGantryAlreadyCoupledY,
               bGantryAlreadyCoupledX=>XRTM1.bGantryAlreadyCoupledX,
               nCurrGantryY=>XRTM1.nCurrGantryY,
               nCurrGantryX=>XRTM1.nCurrGantryX);
fbBenderM1L0(stBender:=M6,
	         bSTOEnable1:=XRTM1.fbRunHOMS.bSTOEnable1,
		     bSTOEnable2:=XRTM1.fbRunHOMS.bSTOEnable2);
// No slave motion through Epics
M2.bExecute := FALSE; // M1L0-Ydwn
M4.bExecute := FALSE; // M1L0-Xdwn

// Convert nCurrGantry to um (smaller number) to read out in epics
XRTM1.fCurrGantryY_um := LINT_TO_REAL(XRTM1.nCurrGantryY) / 1000.0;
XRTM1.fCurrGantryX_um := LINT_TO_REAL(XRTM1.nCurrGantryX) / 1000.0;

// FB_MotionStage's for non-piezo axes
fbMotionStage_m1(stMotionStage:=M1);
fbMotionStage_m2(stMotionStage:=M2);
fbMotionStage_m3(stMotionStage:=M3);
fbMotionStage_m4(stMotionStage:=M4);
fbMotionStage_m6(stMotionStage:=M6);

// Calculate Pitch RMS Error:
fbYRMSErrorM1L0(stMotionStage:=M1,
	            fMaxRMSError=>fMaxYRMSErrorM1L0,
				fMinRMSError=>fMinYRMSErrorM1L0);

fbXRMSErrorM1L0(stMotionStage:=M3,
	            fMaxRMSError=>fMaxXRMSErrorM1L0,
				fMinRMSError=>fMinXRMSErrorM1L0);

fbPitchRMSErrorM1L0(stMotionStage:=M5,
	                fMaxRMSError=>fMaxPitchRMSErrorM1L0,
					fMinRMSError=>fMinPitchRMSErrorM1L0);

fbBenderRMSErrorM1L0(stMotionStage:=M6,
	                 fMaxRMSError=>fMaxBenderRMSErrorM1L0,
					 fMinRMSError=>fMinBenderRMSErrorM1L0);
// Pitch Control
fbM1L0PitchControl(Pitch:=GVL_M1.M1_Pitch,
				   Stepper:=M5,
				   lrCurrentSetpoint:=M5.fPosition,
                   q_bDone=>bM1L0PitchDone,
                   q_bBusy=>bM1L0PitchBusy);
// When STO hit, need to reset SP
IF NOT M5.bHardwareEnable THEN
	M5.fPosition := M5.stAxisStatus.fActPosition;
END_IF

// Raw Encoder Counts For Epics
nEncCntYupM1L0 := ULINT_TO_UDINT(XRTM1.fbRunHOMS.stYupEnc.Count);
nEncCntYdwnM1L0 := ULINT_TO_UDINT(XRTM1.fbRunHOMS.stYdwnEnc.Count);
nEncCntXupM1L0 := ULINT_TO_UDINT(XRTM1.fbRunHOMS.stXupEnc.Count);
nEncCntXdwnM1L0 := ULINT_TO_UDINT(XRTM1.fbRunHOMS.stXdwnEnc.Count);
nEncCntPitchM1L0 := LINT_TO_UDINT(GVL_M1.M1_Pitch.diEncCnt);

// Encoder Reference Values For Epics
nEncRefYupM1L0 := ULINT_TO_UDINT(GVL_M1_Constants.nYUP_ENC_REF);
nEncRefYdwnM1L0 := ULINT_TO_UDINT(GVL_M1_Constants.nYDWN_ENC_REF);
nEncRefXupM1L0 := ULINT_TO_UDINT(GVL_M1_Constants.nXUP_ENC_REF);
nEncRefXdwnM1L0 := ULINT_TO_UDINT(GVL_M1_Constants.nXDWN_ENC_REF);
mcReadParameterPitchM1L0(Axis:=M5.Axis,
	                     Enable:=TRUE,
				         ParameterNumber:=MC_AxisParameter.AxisEncoderOffset,
				         ReadMode:=READMODE_CYCLIC,
				         Value=>fEncRefPitchM1L0_urad);

nEncRefPitchM1L0 := LREAL_TO_UDINT(ABS(fEncRefPitchM1L0_urad) * fEncLeverArm_mm);



// ELMO
//System IO
/////////////////////////////
p_ModbusRx_OutputCoils();
p_ModbusRx_PLCMemory();


//InitParams
////////////////////
rtInitParams(CLK:=gFirstPass);
IF rtInitParams.Q THEN
	Init_XRTM1();
	Init_XRTM2();
	Init_XRTM3();
	gFirstPass := FALSE;
END_IF

//System Error Handling
/////////////////////////////////////
//SystemErrorSummary(); //Check this action for a summary of all system faults
					  
//SystemError();

//Driver Parameter Verification
/////////////////////////////////////

//Gantry Interlock Logic
/////////////////////////////////////
	//SimGantry.VAxis.i_xMotorInterlock := TRUE;
	//SimGantry.PAxis.i_xMotorInterlock := TRUE;
	//SimGantry.SAxis.i_xMotorInterlock := TRUE;

LimitSwitchIO();
	
// Pitch control
/////////////////////////////////////
//XRTM1PitchControl(Pitch:=HOMS1_Pitch, DirectPiezoMode:=(ExpertMode AND PitchManualMode), q_xDone=>HOMS1_Pitch.Axis.bDone, q_xBusy => HOMS1_Pitch.Axis.bBusy);
XRTM2PitchControl(Pitch:=HOMS2_Pitch, DirectPiezoMode:=(ExpertMode AND PitchManualMode), q_xDone=>HOMS2_Pitch.Axis.bDone, q_xBusy => HOMS2_Pitch.Axis.bBusy);
XRTM3PitchControl(Pitch:=HOMS3_Pitch, DirectPiezoMode:=(ExpertMode AND PitchManualMode), q_xDone=>HOMS3_Pitch.Axis.bDone, q_xBusy => HOMS3_Pitch.Axis.bBusy);

//Y motion
/////////////////////////////////////
//XRTM1Y_GantryControl(Gantry:=HOMS1_YGantry);
XRTM2Y_GantryControl(Gantry:=HOMS2_YGantry);
XRTM3Y_GantryControl(Gantry:=HOMS3_YGantry);

HOMS1_YGantry.PAxis.stAxis.ReadStatus();
HOMS1_YGantry.SAxis.stAxis.ReadStatus();
HOMS1_YGantry.PAxis.stStatus.rActPosition := LREAL_TO_REAL(HOMS1_YGantry.PAxis.stAxis.NcToPlc.ActPos);
HOMS1_YGantry.SAxis.stStatus.rActPosition := LREAL_TO_REAL(HOMS1_YGantry.SAxis.stAxis.NcToPlc.ActPos);

HOMS3_YGantry.PAxis.stAxis.ReadStatus();
HOMS3_YGantry.SAxis.stAxis.ReadStatus();
HOMS3_YGantry.PAxis.stStatus.rActPosition := LREAL_TO_REAL(HOMS3_YGantry.PAxis.stAxis.NcToPlc.ActPos);
HOMS3_YGantry.SAxis.stStatus.rActPosition := LREAL_TO_REAL(HOMS3_YGantry.SAxis.stAxis.NcToPlc.ActPos);
	
//X Motion
/////////////////////////////////////
//XRTM1X_GantryControl(Gantry:=HOMS1_XGantry);
XRTM2X_GantryControl(Gantry:=HOMS2_XGantry);
XRTM3X_GantryControl(Gantry:=HOMS3_XGantry);

//Communicate state to MPS
////////////////////////////////
fbMPS_States(GANTRY:=HOMS2_XGantry,
			 OUT_LS:=NOT HOMS2_XGantry.PAxis.xHiLS OR NOT HOMS2_XGantry.SAxis.xLoLS,
			 IN_RANGE:=M2_INRANGE,
			 OUT_RANGE:=M2_OUTRANGE);
			 
bXRT_M2_IN  := fbMPS_States.IN;
bXRT_M2_OUT := fbMPS_States.OUT;

//EPICS Tx Update
////////////////////
p_ModbusTx_InputCoils();
//p_ModbusTx_OutputCoils();
p_ModbusTx_InputReg();
p_ModbusTx_PLCMemory();

//PMPS
PRG_CoatingProtection();
//fbArbiterIO(Arbiter := GVL_PMPS.g_fbArbiter1, fbFFHWO := GVL_PMPS.g_FastFaultOutput1);

// Logging
fbLogHandler();]]></ST>
    </Implementation>
    <Action Name="Init_XRTM1" Id="{a11eaaff-25fb-4e40-9807-fb1f683338da}">
      <Implementation>
        <ST><![CDATA[//FEE-M1
///////////////////////////

//Initialize ELMO Drive references
fbInitDriveRef(stCoE:=HOMS1_XGantry.PAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS1_XGantry.SAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS1_YGantry.PAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS1_YGantry.SAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS1_Pitch.Stepper.stCoE);

//Initialze Drive Speeds and Accelerations
//////////////////////////////////////////
HOMS1_XGantry.PAxis.fAcceleration := 1.0;
HOMS1_XGantry.SAxis.fAcceleration := 1.0;
HOMS1_YGantry.PAxis.fAcceleration := 1.0;
HOMS1_YGantry.SAxis.fAcceleration := 1.0;

HOMS1_XGantry.PAxis.fDeceleration := 1.0;
HOMS1_XGantry.SAxis.fDeceleration := 1.0;
HOMS1_YGantry.PAxis.fDeceleration := 1.0;
HOMS1_YGantry.SAxis.fDeceleration := 1.0;

HOMS1_XGantry.PAxis.fVelocity := 0.1;
HOMS1_XGantry.SAxis.fVelocity := 0.1;
HOMS1_YGantry.PAxis.fVelocity := 0.1;
HOMS1_YGantry.SAxis.fVelocity := 0.1;

HOMS1_Pitch.Stepper.fAcceleration := 39;
HOMS1_Pitch.Stepper.fDeceleration := 39;
HOMS1_Pitch.Stepper.fVelocity     := 39;


//Initialize Piezo Driver
/////////////////////////////////////
HOMS1_Pitch.Piezo.stPIParams.fKp := 0.001;
HOMS1_Pitch.Piezo.stPIParams.tTn := T#500MS;
HOMS1_Pitch.Piezo.stPIParams.fOutMaxLimit := 1;
HOMS1_Pitch.Piezo.stPIParams.fOutMinLimit := -1;

// Initialize deadband settings
HOMS1_Pitch.Stepper.rStepperDmovRange := 15;
HOMS1_Pitch.Piezo.rPiezoDmovRange := 0.5;
                                                                                                                                          

]]></ST>
      </Implementation>
    </Action>
    <Action Name="Init_XRTM2" Id="{5f4f0886-bfe6-466e-ab0f-beab0308d09d}">
      <Implementation>
        <ST><![CDATA[//FEE-M2
///////////////////////////


//Initialize ELMO Drive references
fbInitDriveRef(stCoE:=HOMS2_XGantry.PAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS2_XGantry.SAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS2_YGantry.PAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS2_YGantry.SAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS2_Pitch.Stepper.stCoE);

//Initialze Drive Speeds and Accelerations
//////////////////////////////////////////
HOMS2_XGantry.PAxis.fAcceleration := 1.0;
HOMS2_XGantry.SAxis.fAcceleration := 1.0;
HOMS2_YGantry.PAxis.fAcceleration := 1.0;
HOMS2_YGantry.SAxis.fAcceleration := 1.0;

HOMS2_XGantry.PAxis.fDeceleration := 1.0;
HOMS2_XGantry.SAxis.fDeceleration := 1.0;
HOMS2_YGantry.PAxis.fDeceleration := 1.0;
HOMS2_YGantry.SAxis.fDeceleration := 1.0;

HOMS2_XGantry.PAxis.fVelocity := 0.1;
HOMS2_XGantry.SAxis.fVelocity := 0.1;
HOMS2_YGantry.PAxis.fVelocity := 0.1;
HOMS2_YGantry.SAxis.fVelocity := 0.1;

HOMS2_Pitch.Stepper.fAcceleration := 39;
HOMS2_Pitch.Stepper.fDeceleration := 39;
HOMS2_Pitch.Stepper.fVelocity     := 100;

//Initialize Piezo Driver
/////////////////////////////////////
HOMS2_Pitch.Piezo.stPIParams.fKp := 0.001;
HOMS2_Pitch.Piezo.stPIParams.tTn := T#500MS;
HOMS2_Pitch.Piezo.stPIParams.fOutMaxLimit := 1;
HOMS2_Pitch.Piezo.stPIParams.fOutMinLimit := -1;

// Initialize deadband settings
HOMS2_Pitch.Stepper.rStepperDmovRange := 3;
HOMS2_Pitch.Piezo.rPiezoDmovRange := 0.5;



	


]]></ST>
      </Implementation>
    </Action>
    <Action Name="Init_XRTM3" Id="{4cd8bf74-eac1-478e-83ee-065628004dc5}">
      <Implementation>
        <ST><![CDATA[//FEE-M3
///////////////////////////


//Initialize ELMO Drive references
fbInitDriveRef(stCoE:=HOMS3_XGantry.PAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS3_XGantry.SAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS3_YGantry.PAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS3_YGantry.SAxis.stCoE);
fbInitDriveRef(stCoE:=HOMS3_Pitch.Stepper.stCoE);

//Initialze Drive Speeds and Accelerations
//////////////////////////////////////////
HOMS3_XGantry.PAxis.fAcceleration := 1.0;
HOMS3_XGantry.SAxis.fAcceleration := 1.0;
HOMS3_YGantry.PAxis.fAcceleration := 1.0;
HOMS3_YGantry.SAxis.fAcceleration := 1.0;

HOMS3_XGantry.PAxis.fDeceleration := 1.0;
HOMS3_XGantry.SAxis.fDeceleration := 1.0;
HOMS3_YGantry.PAxis.fDeceleration := 1.0;
HOMS3_YGantry.SAxis.fDeceleration := 1.0;

HOMS3_XGantry.PAxis.fVelocity := 0.1;
HOMS3_XGantry.SAxis.fVelocity := 0.1;
HOMS3_YGantry.PAxis.fVelocity := 0.1;
HOMS3_YGantry.SAxis.fVelocity := 0.1;

HOMS3_Pitch.Stepper.fAcceleration := 39;
HOMS3_Pitch.Stepper.fDeceleration := 39;
HOMS3_Pitch.Stepper.fVelocity     := 100;

//Initialize Piezo Driver
/////////////////////////////////////
HOMS3_Pitch.Piezo.stPIParams.fKp := 0.001;
HOMS3_Pitch.Piezo.stPIParams.tTn := T#500MS;
HOMS3_Pitch.Piezo.stPIParams.fOutMaxLimit := 1;
HOMS3_Pitch.Piezo.stPIParams.fOutMinLimit := -1;


// Initialize deadband settings
HOMS3_Pitch.Stepper.rStepperDmovRange := 20;
HOMS3_Pitch.Piezo.rPiezoDmovRange := 0.5;]]></ST>
      </Implementation>
    </Action>
    <Action Name="LimitSwitchIO" Id="{f9e468fa-ee02-4f8a-956e-139b70621257}">
      <Implementation>
        <ST><![CDATA[//XRT M2
//////////////////////////
fbM2Y1LS(diInputs:=HOMS2_YGantry.PAxis.diInputs, 
xHiLS=>HOMS2_YGantry.PAxis.xHiLS,
xLoLS=>HOMS2_YGantry.PAxis.xLoLS,
STO => gM2STO);

fbM2Y2LS(diInputs:=HOMS2_YGantry.SAxis.diInputs, 
xHiLS=>HOMS2_YGantry.SAxis.xHiLS,
xLoLS=>HOMS2_YGantry.SAxis.xLoLS);

fbM2X1LS(diInputs:=HOMS2_XGantry.PAxis.diInputs, 
xHiLS=>HOMS2_XGantry.PAxis.xHiLS,
xLoLS=>HOMS2_XGantry.PAxis.xLoLS);

fbM2X2LS(diInputs:=HOMS2_XGantry.SAxis.diInputs, 
xHiLS=>HOMS2_XGantry.SAxis.xHiLS,
xLoLS=>HOMS2_XGantry.SAxis.xLoLS);

fbM2P1LS(Pitch:=HOMS2_Pitch,
xHiLS=>HOMS2_Pitch.Stepper.xHiLS,
xLoLS=>HOMS2_Pitch.Stepper.xLoLS);

//XRT M3
//////////////////////////
fbM3Y1LS(diInputs:=HOMS3_YGantry.PAxis.diInputs, 
xHiLS=>HOMS3_YGantry.PAxis.xHiLS,
xLoLS=>HOMS3_YGantry.PAxis.xLoLS,
STO => gM3STO);

fbM3Y2LS(diInputs:=HOMS3_YGantry.SAxis.diInputs, 
xHiLS=>HOMS3_YGantry.SAxis.xHiLS,
xLoLS=>HOMS3_YGantry.SAxis.xLoLS);

fbM3X1LS(diInputs:=HOMS3_XGantry.PAxis.diInputs, 
xHiLS=>HOMS3_XGantry.PAxis.xHiLS,
xLoLS=>HOMS3_XGantry.PAxis.xLoLS);
(*
fbM3X2LS(diInputs:=HOMS3_XGantry.PAxis.diInputs,  //Paxis is here on purpose <HACK>
xHiLS=>HOMS3_XGantry.SAxis.xHiLS,
xLoLS=>HOMS3_XGantry.SAxis.xLoLS);
*)
fbM3X2LS(diInputs:=HOMS3_XGantry.SAxis.diInputs,  // Switching to SAxis works as expected, reason for <HACK> unclear
xHiLS=>HOMS3_XGantry.SAxis.xHiLS,
xLoLS=>HOMS3_XGantry.SAxis.xLoLS);

fbM3P1LS(Pitch:=HOMS3_Pitch,
xHiLS=>HOMS3_Pitch.Stepper.xHiLS,
xLoLS=>HOMS3_Pitch.Stepper.xLoLS);

]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="Main">
      <LineId Id="345" Count="81" />
      <LineId Id="341" Count="3" />
      <LineId Id="3" Count="79" />
      <LineId Id="336" Count="0" />
      <LineId Id="83" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="Main.Init_XRTM1">
      <LineId Id="2" Count="43" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Main.Init_XRTM2">
      <LineId Id="2" Count="47" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Main.Init_XRTM3">
      <LineId Id="2" Count="41" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="Main.LimitSwitchIO">
      <LineId Id="27" Count="49" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>